#해시
1.사용 기준 : 문자-숫자 짝으로 자료를 저장해야 할 때
2.탐색 방법 :
unordered_map<~,~> m;
if(m.find(key)==m.end()){//찾는 게 없는가?
    m.insert(make_pair(clothes[i][1],1));//없으면 넣고
}else{
    m[clothes[i][1]]++; //있으면 숫자 증가
}
3.순회 방법 :
unordered_map<~, ~>::iterator it;
for (it = m.begin(); it != m.end(); it++) {
    ~
}

#스택/큐/우선순위큐
1.셋다 순차적으로 진행되는 문제에 주로 사용 ex) 초단위 계산, 절차대로 작업
스택 : 나중에 넣은것부터 변화를 줄 경우
큐 : 처음에 넣은것부터 변화를 줄 경우
우선순위큐 : 항상 정렬된 리스트가 필요한 경우
2.우선순위 큐를 반으로 쪼개 두개의 우선순위큐를 만들고 서로 정렬을 반대 규칙으로
 하면,언제나 중앙값을 찾을 수 있는 우선순위큐를 만들 수 있다. 긴쪽의 탑.
삽입시 양 쪽 탑을 비교해서 적절한 큐에 넣고, 최대값과 최소값은 루트를 탐색한다.

#정렬
sort 함수를 사용하면 된다.
이때 펑터를 이용해 정렬 규칙을 바꿔 원하는 정렬 형태를 만들 수 있다.

#브루트포스
1.입력 범위가 작고 전체 문제를 부분 문제로 쪼갤 수 있으며, 부분 문제를 푸는 데 
이전까지의 선택이 이후의 선택을 할 때 고려해야할 필요가 없다면 고려한다.
미리 시간복잡도를 계산해보고 억 단위 아래면 사용한다.
재귀함수를 쓰는 게 일반적이다. 단순 반복문 사용 시 시간복잡도만 계산한다.
2.계산을 할 때 꼭 문제의 요구사항이 순열인지 조합인지를 봐야 한다.
조합을 요구한다면 순서를 강제할 필요가 있다.

#